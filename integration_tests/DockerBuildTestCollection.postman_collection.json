{
	"info": {
		"_postman_id": "161b2f5c-0e1c-4bc6-a744-dd75a6216e24",
		"name": "DockerBuildTestCollection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "PD CHECK PingDiretory honors requests",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8dc87685-abfd-4f6c-a725-5be2ff88e674",
						"exec": [
							"var _retries = pm.environment.get(\"_retries\");",
							"",
							"// Checks to see if the server actually responded",
							"if (pm.response.code == 200 ) {",
							"    pm.environment.unset(\"_retries\");",
							"    console.log(\"connection successful\");",
							"    ",
							"    pm.test(\"response is ok\", function(){",
							"        pm.response.to.have.status(200);",
							"    });",
							"    ",
							"    pm.test(\"response is empty\", function(){",
							"        pm.response.to.not.have.body();",
							"    });",
							"} else {",
							"    if (!_retries) {",
							"        _retries=10;",
							"    }",
							"    ",
							"    if ( _retries > 0 ) {",
							"        _retries--;",
							"        pm.environment.set(\"_retries\", _retries);",
							"        var timeout=_.random(1000,15000);",
							"        console.log(\"Attempting next connection in \"+timeout+\"ms ...\");",
							"        // loop back to this request (request.name) after the timeout elapses",
							"        setTimeout(function() {postman.setNextRequest(request.name);}, timeout);",
							"    } else { ",
							"        postman.setNextRequest(null);",
							"    }",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "05e7a877-6ace-4d57-bf76-93c0d411f558",
						"exec": [
							"var _host = pm.variables.get(\"pd_hostname\");",
							"var _port = pm.variables.get(\"pd_port_https\");",
							"console.log(\"Attempting connection to https://\"+_host+\":\" +_port+ \" ...\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "OPTIONS",
				"header": [],
				"url": {
					"raw": "https://{{pd_hostname}}:{{pd_port_https}}/available-state",
					"protocol": "https",
					"host": [
						"{{pd_hostname}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"available-state"
					]
				}
			},
			"response": []
		},
		{
			"name": "PF CHECK PingFederate engine honors requests",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8dc87685-abfd-4f6c-a725-5be2ff88e674",
						"exec": [
							"var _retries = pm.environment.get(\"_retries\");",
							"",
							"// Checks to see if the server actually responded",
							"if (pm.response.code == 200 ) {",
							"    pm.environment.unset(\"_retries\");",
							"    console.log(\"connection successful\");",
							"",
							"    pm.test(\"response is ok\", function(){",
							"        pm.response.to.have.status(200);",
							"    });",
							"    ",
							"    pm.test(\"response is not empty\", function(){",
							"        pm.response.to.have.body();",
							"    });",
							"",
							"    pm.test(\"response is not JSON\", function(){",
							"        pm.response.to.not.be.json;",
							"    });",
							"",
							"    pm.test(\"response string is OK\", function(){",
							"        pm.expect(pm.response.text()).to.include(\"OK\");",
							"    });",
							"} else {",
							"    if (!_retries){",
							"        _retries=10;",
							"    }",
							"    ",
							"    if ( _retries > 0 ) {",
							"        _retries--;",
							"        pm.environment.set(\"_retries\", _retries);",
							"        var timeout=_.random(1000,15000);",
							"        console.log(\"Attempting next connection in \"+timeout+\"ms ...\");",
							"        // loop back to this request (request.name) after the timeout elapses",
							"        setTimeout(function() {postman.setNextRequest(request.name);}, timeout);",
							"    } else { ",
							"        postman.setNextRequest(null);",
							"    }",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "05e7a877-6ace-4d57-bf76-93c0d411f558",
						"exec": [
							"var _host = pm.variables.get(\"pf_engine_hostname\");",
							"var _port = pm.variables.get(\"pf_engine_port\");",
							"console.log(\"Attempting connection to https://\"+_host+\":\" +_port+ \" ...\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{admin_pwd}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{admin_user}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{pf_engine_hostname}}:{{pf_engine_port}}/pf/heartbeat.ping",
					"protocol": "https",
					"host": [
						"{{pf_engine_hostname}}"
					],
					"port": "{{pf_engine_port}}",
					"path": [
						"pf",
						"heartbeat.ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "PF CHECK PingFederate admin honors requests",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8dc87685-abfd-4f6c-a725-5be2ff88e674",
						"exec": [
							"var _retries = pm.environment.get(\"_retries\");",
							"",
							"// Checks to see if the server actually responded",
							"if (pm.response.code == 200 ) {",
							"    pm.environment.unset(\"_retries\");",
							"    console.log(\"connection successful\");",
							"",
							"    pm.test(\"response is ok\", function(){",
							"        pm.response.to.have.status(200);",
							"    });",
							"    ",
							"    pm.test(\"response is not empty\", function(){",
							"        pm.response.to.have.body();",
							"    });",
							"} else {",
							"    if (!_retries){",
							"        _retries=10;",
							"    }",
							"    ",
							"    if ( _retries > 0 ) {",
							"        _retries--;",
							"        pm.environment.set(\"_retries\", _retries);",
							"        var timeout=_.random(1000,15000);",
							"        console.log(\"Attempting next connection in \"+timeout+\"ms ...\");",
							"        // loop back to this request (request.name) after the timeout elapses",
							"        setTimeout(function() {postman.setNextRequest(request.name);}, timeout);",
							"    } else { ",
							"        postman.setNextRequest(null);",
							"    }",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "05e7a877-6ace-4d57-bf76-93c0d411f558",
						"exec": [
							"var _host = pm.variables.get(\"pf_admin_hostname\");",
							"var _port = pm.variables.get(\"pf_admin_port\");",
							"console.log(\"Attempting connection to https://\"+_host+\":\" +_port+ \" ...\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{admin_pwd}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{admin_user}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{pf_admin_hostname}}:{{pf_admin_port}}/pingfederate/app",
					"protocol": "https",
					"host": [
						"{{pf_admin_hostname}}"
					],
					"port": "{{pf_admin_port}}",
					"path": [
						"pingfederate",
						"app"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD CHECK HEAD available-or-degraded-state",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8dc87685-abfd-4f6c-a725-5be2ff88e674",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is empty\", function(){",
							"    pm.response.to.not.have.body();",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "HEAD",
				"header": [],
				"url": {
					"raw": "https://{{pd_hostname}}:{{pd_port_https}}/available-or-degraded-state",
					"protocol": "https",
					"host": [
						"{{pd_hostname}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"available-or-degraded-state"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD CHECK HEAD available-state",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8dc87685-abfd-4f6c-a725-5be2ff88e674",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is empty\", function(){",
							"    pm.response.to.not.have.body();",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "HEAD",
				"header": [],
				"url": {
					"raw": "https://{{pd_hostname}}:{{pd_port_https}}/available-state",
					"protocol": "https",
					"host": [
						"{{pd_hostname}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"available-state"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD CHECK HEAD available-or-degraded-state",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8dc87685-abfd-4f6c-a725-5be2ff88e674",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"response is empty\", function(){",
							"    pm.response.to.not.have.body();",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "HEAD",
				"header": [],
				"url": {
					"raw": "https://{{pd_hostname}}:{{pd_port_https}}/available-or-degraded-state",
					"protocol": "https",
					"host": [
						"{{pd_hostname}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"available-or-degraded-state"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD CHECK GET available-state",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8dc87685-abfd-4f6c-a725-5be2ff88e674",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"availability-state  key is present\", function(){",
							"    pm.expect(jsonData[\"availability-state\"]).to.exist;",
							"});",
							"",
							"pm.test(\"State is available\", function(){",
							"    pm.expect(jsonData[\"availability-state\"]).to.be.equal(\"AVAILABLE\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{pd_hostname}}:{{pd_port_https}}/available-state",
					"protocol": "https",
					"host": [
						"{{pd_hostname}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"available-state"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD CHECK GET available-or-degraded-state",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8dc87685-abfd-4f6c-a725-5be2ff88e674",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"availability-state  key is present\", function(){",
							"    pm.expect(jsonData[\"availability-state\"]).to.exist;",
							"});",
							"",
							"pm.test(\"State is available\", function(){",
							"    pm.expect(jsonData[\"availability-state\"]).to.be.equal(\"AVAILABLE\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{pd_hostname}}:{{pd_port_https}}/available-or-degraded-state",
					"protocol": "https",
					"host": [
						"{{pd_hostname}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"available-or-degraded-state"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD CHECK POST available-state",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8dc87685-abfd-4f6c-a725-5be2ff88e674",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"availability-state  key is present\", function(){",
							"    pm.expect(jsonData[\"availability-state\"]).to.exist;",
							"});",
							"",
							"pm.test(\"State is available\", function(){",
							"    pm.expect(jsonData[\"availability-state\"]).to.be.equal(\"AVAILABLE\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://{{pd_hostname}}:{{pd_port_https}}/available-state",
					"protocol": "https",
					"host": [
						"{{pd_hostname}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"available-state"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD CHECK POST available-or-degraded-state",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8dc87685-abfd-4f6c-a725-5be2ff88e674",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"availability-state  key is present\", function(){",
							"    pm.expect(jsonData[\"availability-state\"]).to.exist;",
							"});",
							"",
							"pm.test(\"State is available\", function(){",
							"    pm.expect(jsonData[\"availability-state\"]).to.be.equal(\"AVAILABLE\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://{{pd_hostname}}:{{pd_port_https}}/available-or-degraded-state",
					"protocol": "https",
					"host": [
						"{{pd_hostname}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"available-or-degraded-state"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD Config API get all Back-ends",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c4268d00-4562-45db-9f6c-4c39400fbed1",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"Resources  key is present\", function(){",
							"    pm.expect(jsonData[\"Resources\"]).to.exist;",
							"    console.log(\"Back-ends reported in configuration:\");",
							"    jsonData[\"Resources\"].forEach(function(backend){console.log(\"  - \"+backend[\"backendID\"]);});",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{pd_hostname}}:{{pd_port_https}}/config/backends",
					"protocol": "https",
					"host": [
						"{{pd_hostname}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"config",
						"backends"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD Config API get userRoot Back-end",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c4268d00-4562-45db-9f6c-4c39400fbed1",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"baseDN  key is present\", function(){",
							"    pm.expect(jsonData[\"baseDN\"]).to.exist;",
							"    console.log(\"Base DNs reported in userRoot configuration:\");",
							"    jsonData[\"baseDN\"].forEach(function(baseDN){console.log(\"  - \"+baseDN);});",
							"});",
							"",
							"pm.test(\"Base DN is as expected\", function(){",
							"    pm.expect(jsonData[\"baseDN\"][0]).to.be.equal(\"dc=example,dc=com\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{pd_hostname}}:{{pd_port_https}}/config/backends/userRoot",
					"protocol": "https",
					"host": [
						"{{pd_hostname}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"config",
						"backends",
						"userRoot"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API get schemas",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b1ceea23-5599-4efe-ab5d-c1cb687e00d9",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"Schemas key is present\",function(){",
							"    pm.expect(jsonData[\"schemas\"]).to.exist;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{pd_hostname}}:{{pd_port_https}}/directory/v1/schemas",
					"protocol": "https",
					"host": [
						"{{pd_hostname}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1",
						"schemas"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API get inetOrgPerson schema",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b1ceea23-5599-4efe-ab5d-c1cb687e00d9",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"Schema key is present\",function(){",
							"    pm.expect(jsonData[\"$schema\"]).to.exist;",
							"});",
							"",
							"pm.test(\"classType key is present\",function(){",
							"    pm.expect(jsonData[\"classType\"]).to.exist;",
							"});",
							"",
							"pm.test(\"classType is structural\",function(){",
							"    pm.expect(jsonData[\"classType\"]).to.be.equal(\"structural\");",
							"});",
							"",
							"pm.test(\"Type key is present\",function(){",
							"    pm.expect(jsonData[\"type\"]).to.exist;",
							"});",
							"",
							"pm.test(\"Type is object\",function(){",
							"    pm.expect(jsonData[\"type\"]).to.be.equal(\"object\");",
							"});",
							"",
							"pm.test(\"properties key is present\",function(){",
							"    pm.expect(jsonData[\"properties\"]).to.exist;",
							"});",
							"",
							"console.log(\"Attributes of the inetOrgPerson class:\");",
							"for ( var key in jsonData[\"properties\"] ) {",
							"    if (jsonData[\"properties\"].hasOwnProperty(key)){",
							"        console.log(\" - \"+key);",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{pd_hostname}}:{{pd_port_https}}/directory/v1/schemas/inetOrgPerson",
					"protocol": "https",
					"host": [
						"{{pd_hostname}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1",
						"schemas",
						"inetOrgPerson"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API get RootDSE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b1ceea23-5599-4efe-ab5d-c1cb687e00d9",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"Vendor string is present\",function(){",
							"    pm.expect(jsonData[\"vendorName\"]).to.exist;",
							"});",
							"",
							"pm.test(\"Vendor string is as expected\",function(){",
							"    pm.expect(jsonData[\"vendorName\"]).to.be.equal(\"Ping Identity Corporation\");",
							"});",
							"",
							"pm.test(\"publicBaseDNs key is present\", function(){",
							"    pm.expect(jsonData[\"publicBaseDNs\"]).to.exist;",
							"});",
							"",
							"pm.test(\"Base DN is as expected\", function(){",
							"    pm.expect(jsonData[\"publicBaseDNs\"][0]).to.be.equal(\"dc=example,dc=com\");",
							"    pm.environment.set(\"_base_dn\",jsonData[\"publicBaseDNs\"][0]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{pd_hostname}}:{{pd_port_https}}/directory/v1",
					"protocol": "https",
					"host": [
						"{{pd_hostname}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API get base",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b1ceea23-5599-4efe-ab5d-c1cb687e00d9",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"_dn string is present\",function(){",
							"    pm.expect(jsonData[\"_dn\"]).to.exist;",
							"});",
							"",
							"pm.test(\"Base DN is as expected\",function(){",
							"    var base_dn = pm.environment.get(\"pd_base_dn\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{pd_hostname}}:{{pd_port_https}}/directory/v1/{{_base_dn}}",
					"protocol": "https",
					"host": [
						"{{pd_hostname}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1",
						"{{_base_dn}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API get people branch",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b1ceea23-5599-4efe-ab5d-c1cb687e00d9",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"_dn string is present\",function(){",
							"    pm.expect(jsonData[\"_dn\"]).to.exist;",
							"});",
							"",
							"pm.test(\"Base DN is as expected\",function(){",
							"    var _base_dn = pm.environment.get(\"_base_dn\");",
							"    var dn = \"ou=people,\"+_base_dn;",
							"    pm.expect(jsonData[\"_dn\"].toLowerCase()).to.be.equal(dn.toLowerCase());",
							"});",
							"",
							"if (pm.response.code == 200) {",
							"    postman.setNextRequest(\"PD REST API get groups branch\");",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{pd_hostname}}:{{pd_port_https}}/directory/v1/ou=People,{{_base_dn}}",
					"protocol": "https",
					"host": [
						"{{pd_hostname}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1",
						"ou=People,{{_base_dn}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API create people branch",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b1ceea23-5599-4efe-ab5d-c1cb687e00d9",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"_dn\": \"ou=People,{{_base_dn}}\",\n\t\"objectClass\": [\"organizationalUnit\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{pd_hostname}}:{{pd_port_https}}/directory/v1",
					"protocol": "https",
					"host": [
						"{{pd_hostname}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API get groups branch",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b1ceea23-5599-4efe-ab5d-c1cb687e00d9",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"    ",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"_dn string is present\",function(){",
							"    pm.expect(jsonData[\"_dn\"]).to.exist;",
							"});",
							"",
							"pm.test(\"Base DN is as expected\",function(){",
							"    var _base_dn = pm.environment.get(\"_base_dn\");",
							"    pm.expect(jsonData[\"_dn\"]).to.be.equal(\"ou=Groups,\"+_base_dn);",
							"});",
							"",
							"if (pm.response.code == 200) {",
							"    postman.setNextRequest(\"PD REST API create user\");",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{pd_hostname}}:{{pd_port_https}}/directory/v1/ou=Groups,{{_base_dn}}",
					"protocol": "https",
					"host": [
						"{{pd_hostname}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1",
						"ou=Groups,{{_base_dn}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API create groups branch",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b1ceea23-5599-4efe-ab5d-c1cb687e00d9",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"_dn\": \"ou=groups,{{_base_dn}}\",\n\t\"objectClass\": [\"organizationalUnit\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{pd_hostname}}:{{pd_port_https}}/directory/v1",
					"protocol": "https",
					"host": [
						"{{pd_hostname}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b1ceea23-5599-4efe-ab5d-c1cb687e00d9",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    // 201 means means the creation worked",
							"    // 409 means the entry already existed",
							"    pm.expect([201,409]).to.include(pm.response.code);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"mail\": [\n        \"{{regular_user}}@example.com\"\n    ],\n    \"sn\": [\n        \"postman\"\n    ],\n    \"cn\": [\n        \"Postman User.0\"\n    ],\n    \"givenName\": [\n        \"user.0\"\n    ],\n    \"userPassword\": [\n    \t\"{{regular_pwd}}\"\n    \t],\n    \"pf-connected-identity\": [\n        \"auth-source=pf-local-identity:user-id=postman.user.0\"\n    ],\n    \"uid\": [\n        \"{{regular_user}}\"\n    ],\n    \"objectClass\": [\n        \"top\",\n        \"person\",\n        \"organizationalPerson\",\n        \"inetOrgPerson\",\n        \"pf-connected-identities\"\n    ],\n    \"_dn\": \"uid={{regular_user}},ou=people,{{_base_dn}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{pd_hostname}}:{{pd_port_https}}/directory/v1",
					"protocol": "https",
					"host": [
						"{{pd_hostname}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API get user before becoming member of group",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b1ceea23-5599-4efe-ab5d-c1cb687e00d9",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://{{pd_hostname}}:{{pd_port_https}}/directory/v1/uid=postman.user.0,ou=People,{{_base_dn}}",
					"protocol": "https",
					"host": [
						"{{pd_hostname}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1",
						"uid=postman.user.0,ou=People,{{_base_dn}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API create group",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b1ceea23-5599-4efe-ab5d-c1cb687e00d9",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    // 201 means means the creation worked",
							"    // 409 means the entry already existed",
							"    pm.expect([201,409]).to.include(pm.response.code);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"member\": [\n        \"uid=postman.user.0,ou=people,{{_base_dn}}\"\n    ],\n    \"cn\": [\n        \"postman.group.0\"\n    ],\n    \"objectClass\": [\n        \"top\",\n        \"groupOfNames\"\n    ],\n    \"_dn\": \"cn=postman.group.0,ou=groups,{{_base_dn}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{pd_hostname}}:{{pd_port_https}}/directory/v1",
					"protocol": "https",
					"host": [
						"{{pd_hostname}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API get user afet becoming member of group",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b1ceea23-5599-4efe-ab5d-c1cb687e00d9",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{pd_hostname}}:{{pd_port_https}}/directory/v1/uid=postman.user.0,ou=People,{{_base_dn}}",
					"protocol": "https",
					"host": [
						"{{pd_hostname}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1",
						"uid=postman.user.0,ou=People,{{_base_dn}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PF Admin API CHECK PingFederate has PingID adapter",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8dc87685-abfd-4f6c-a725-5be2ff88e674",
						"exec": [
							"// Checks to see if the server actually responded",
							"if (pm.response.code == 200 ) {",
							"    console.log(\"connection successful\");",
							"    pm.test(\"response is ok\", function(){",
							"        pm.response.to.have.status(200);",
							"    });",
							"    ",
							"    pm.test(\"response is not empty\", function(){",
							"        pm.response.to.have.body();",
							"    });",
							"    ",
							"    pm.test(\"response is JSON\", function(){",
							"        pm.response.to.be.json;",
							"    });",
							"    ",
							"    var jsonData = JSON.parse(responseBody);",
							"    ",
							"    pm.test(\"id key is present\",function(){",
							"        pm.expect(jsonData[\"id\"]).to.exist;",
							"    });",
							"    ",
							"    pm.test(\"ID is as expected\",function(){",
							"        pm.expect(jsonData[\"id\"]).to.be.equal(\"com.pingidentity.adapters.pingid.PingIDAdapter\");",
							"    });",
							"} else {",
							"    ",
							"    // Generate a random group ID (one in 10,000,000 chance of collision)",
							"    var timeout=_.random(1000,15000);",
							"    console.log(\"Attempting next connection in \"+timeout+\"ms ...\");",
							"    setTimeout(function() {postman.setNextRequest(request.name);}, timeout);",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "05e7a877-6ace-4d57-bf76-93c0d411f558",
						"exec": [
							"var _host = pm.variables.get(\"pf_admin_hostname\");",
							"var _port = pm.variables.get(\"pf_admin_port\");",
							"console.log(\"Attempting connection to https://\"+_host+\":\" +_port+ \" ...\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{admin_pwd}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{admin_user}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "X-XSRF-Header",
						"value": "pingfederate",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{pf_admin_hostname}}:{{pf_admin_port}}/pf-admin-api/v1/idp/adapters/descriptors/com.pingidentity.adapters.pingid.PingIDAdapter",
					"protocol": "https",
					"host": [
						"{{pf_admin_hostname}}"
					],
					"port": "{{pf_admin_port}}",
					"path": [
						"pf-admin-api",
						"v1",
						"idp",
						"adapters",
						"descriptors",
						"com.pingidentity.adapters.pingid.PingIDAdapter"
					]
				}
			},
			"response": []
		},
		{
			"name": "PF OAuth code-flow leg-1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bc6b5143-869c-4bb1-b81e-e5d4a03511ea",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(302);",
							"});",
							"",
							"pm.test(\"response is empty\", function(){",
							"    pm.response.to.not.have.body();",
							"});",
							"",
							"pm.test(\"OIDC AuthZ Code returned\", function () {",
							"    var loc = pm.response.headers.get(\"location\").split(\"=\");",
							"    var _authzCode = loc[1];",
							"    pm.expect(_authzCode).to.not.equal(undefined);",
							"    pm.expect(_authzCode).to.not.equal(null);",
							"    pm.expect(_authzCode).to.not.be.empty;",
							"",
							"    // Parse out the Code value",
							"    pm.environment.set(\"_authzCode\", _authzCode);",
							"    console.log(\"AuthZ Code:\", _authzCode);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "pf.username",
							"value": "{{regular_user}}",
							"type": "text"
						},
						{
							"key": "pf.pass",
							"value": "{{regular_pwd}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://{{pf_engine_hostname}}:{{pf_engine_port}}/as/authorization.oauth2?response_type=code&client_id=ac_client&redirect_uri=https://localhost:9031/OAuthPlayground/authorization_code/callback",
					"protocol": "https",
					"host": [
						"{{pf_engine_hostname}}"
					],
					"port": "{{pf_engine_port}}",
					"path": [
						"as",
						"authorization.oauth2"
					],
					"query": [
						{
							"key": "response_type",
							"value": "code"
						},
						{
							"key": "client_id",
							"value": "ac_client"
						},
						{
							"key": "redirect_uri",
							"value": "https://localhost:9031/OAuthPlayground/authorization_code/callback"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "PF OAuth code-flow leg-2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dbee2997-28a8-42e5-ab46-915d74cada50",
						"exec": [
							"function parseJwt (token) {",
							"            var base64Url = token.split('.')[1];",
							"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
							"            return JSON.parse(atob(base64));",
							"        }",
							"",
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.test(\"Tokens returned\", function () {",
							"    pm.expect(jsonData[\"access_token\"]).not.equal(null);",
							"    pm.expect(jsonData[\"access_token\"]).not.empty;",
							"    console.log(\"Access Token: \", parseJwt(jsonData.access_token));",
							"    console.log(\"--------------\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "ac_client",
							"type": "string"
						},
						{
							"key": "password",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://{{pf_engine_hostname}}:{{pf_engine_port}}/as/token.oauth2?grant_type=authorization_code&redirect_uri=https://localhost:9031/OAuthPlayground/authorization_code/callback&code={{_authzCode}}",
					"protocol": "https",
					"host": [
						"{{pf_engine_hostname}}"
					],
					"port": "{{pf_engine_port}}",
					"path": [
						"as",
						"token.oauth2"
					],
					"query": [
						{
							"key": "grant_type",
							"value": "authorization_code"
						},
						{
							"key": "redirect_uri",
							"value": "https://localhost:9031/OAuthPlayground/authorization_code/callback"
						},
						{
							"key": "code",
							"value": "{{_authzCode}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API delete group",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b1ceea23-5599-4efe-ab5d-c1cb687e00d9",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"pm.test(\"response is empty\", function(){",
							"    pm.response.to.not.have.body();",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://{{pd_hostname}}:{{pd_port_https}}/directory/v1/cn=postman.group.0,ou=groups,{{_base_dn}}",
					"protocol": "https",
					"host": [
						"{{pd_hostname}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1",
						"cn=postman.group.0,ou=groups,{{_base_dn}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b1ceea23-5599-4efe-ab5d-c1cb687e00d9",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"pm.test(\"response is empty\", function(){",
							"    pm.response.to.not.have.body();",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://{{pd_hostname}}:{{pd_port_https}}/directory/v1/uid=postman.user.0,ou=people,{{_base_dn}}",
					"protocol": "https",
					"host": [
						"{{pd_hostname}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1",
						"uid=postman.user.0,ou=people,{{_base_dn}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{pd_admin_pwd}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{pd_admin_user}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "5d64bf06-2f98-4cf7-b0f4-f88b22825417",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "cf8e98ff-a67a-4841-bfa6-24e7944e2ace",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "f6f8de3f-933b-4ac9-af99-80e54d6007f8",
			"key": "admin_user",
			"value": "administrator",
			"type": "string"
		},
		{
			"id": "dcab7645-c9f0-492c-b27c-979fcabb6353",
			"key": "admin_pwd",
			"value": "2FederateM0re",
			"type": "string"
		},
		{
			"id": "6f1261da-0686-4bc2-8ef5-5ff81a161e2d",
			"key": "pd_admin_user",
			"value": "cn={{admin_user}}",
			"type": "string"
		},
		{
			"id": "7a3da5ba-4668-4334-9a72-ed14d24df04c",
			"key": "pd_admin_pwd",
			"value": "{{admin_pwd}}",
			"type": "string"
		},
		{
			"id": "0bd90438-27c3-4791-918d-fbede5139149",
			"key": "pd_hostname",
			"value": "pingdirectory",
			"type": "string"
		},
		{
			"id": "bd5cd67f-0c13-4602-8aae-a0467a03df5e",
			"key": "pd_port_https",
			"value": "443",
			"type": "string"
		},
		{
			"id": "45f3cdb1-e762-4857-b417-94b73f3fffa1",
			"key": "pd_port_ldaps",
			"value": "636",
			"type": "string"
		},
		{
			"id": "bccf3599-498e-4b62-9652-c15354e26aec",
			"key": "pd_port_ldap",
			"value": "389",
			"type": "string"
		},
		{
			"id": "0185ff42-731c-46b7-88a0-d76e84130139",
			"key": "pf_engine_hostname",
			"value": "pingfederate",
			"type": "string"
		},
		{
			"id": "7aee9d27-62be-4373-a462-7230428eead4",
			"key": "pf_engine_port",
			"value": "9031",
			"type": "string"
		},
		{
			"id": "51c83579-d3a1-4706-8a58-a2f2904cbd56",
			"key": "pf_admin_hostname",
			"value": "pingfederate",
			"type": "string"
		},
		{
			"id": "81f70fb2-cbc9-47fc-86ba-e488a4f7fae8",
			"key": "pf_admin_port",
			"value": "9999",
			"type": "string"
		},
		{
			"id": "282540bb-ecb8-46ad-b35e-59f0e5112880",
			"key": "regular_user",
			"value": "postman.user.0",
			"type": "string"
		},
		{
			"id": "acc7eba7-6244-491a-9f0e-78e6e43f4a69",
			"key": "regular_pwd",
			"value": "{{admin_pwd}}",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}